{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, onSnapshot } from \"firebase/firestore\";\nimport { GoogleAuthProvider, getAuth, onAuthStateChanged, signInWithPopup, signOut } from 'firebase/auth';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA3RH_sHZlSzYjgWFjMJ8ICqUaSmlM32MI\",\n  authDomain: \"test-react-24.firebaseapp.com\",\n  databaseURL: \"https://test-react-24-default-rtdb.firebaseio.com\",\n  projectId: \"test-react-24\",\n  storageBucket: \"test-react-24.appspot.com\",\n  messagingSenderId: \"953116776213\",\n  appId: \"1:953116776213:web:e53b5925ca77097c89bb1c\",\n  measurementId: \"G-BTZC17XYPD\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\nconst auth = getAuth(app);\nexport const storage = getStorage(app);\nexport const categoryCollection = collection(db, \"categories\");\nexport const productsCollection = collection(db, \"products\");\nexport const ordersCollection = collection(db, \"orders\");\nconst provider = new GoogleAuthProvider();\nexport const LogIn = () => signInWithPopup(auth, provider);\n_c = LogIn;\nexport const LogOut = () => signOut(auth);\n_c2 = LogOut;\nexport const onAuthChange = callback => onAuthStateChanged(auth, callback);\nexport const onCategoriesLoad = callback => onSnapshot(categoryCollection, snapshot => callback(snapshot.docs.map(doc => ({\n  id: doc.id,\n  ...doc.data()\n}))));\nexport const onProductsLoad = callback => onSnapshot(productsCollection, snapshot => callback(snapshot.docs.map(doc => ({\n  id: doc.id,\n  ...doc.data()\n}))));\nexport const onOrdersLoad = callback => onSnapshot(ordersCollection, snapshot => callback(snapshot.docs.map(doc => ({\n  id: doc.id,\n  ...doc.data()\n}))));\n\n// отправка фотографии и получение ее url\nexport const uploadProductPhoto = file => {\n  const storageRef = ref(storage, `products/${file.name}`);\n  return uploadBytes(storageRef, file).then(() => {\n    return getDownloadURL(storageRef);\n  }).catch(error => {\n    console.log(\"Failed to upload product photo:\", error);\n  });\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"LogIn\");\n$RefreshReg$(_c2, \"LogOut\");","map":{"version":3,"names":["initializeApp","getFirestore","collection","onSnapshot","GoogleAuthProvider","getAuth","onAuthStateChanged","signInWithPopup","signOut","getStorage","ref","uploadBytes","getDownloadURL","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","auth","storage","categoryCollection","productsCollection","ordersCollection","provider","LogIn","_c","LogOut","_c2","onAuthChange","callback","onCategoriesLoad","snapshot","docs","map","doc","id","data","onProductsLoad","onOrdersLoad","uploadProductPhoto","file","storageRef","name","then","catch","error","console","log","$RefreshReg$"],"sources":["D:/diplom_adidas/src/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, onSnapshot } from \"firebase/firestore\";\nimport { GoogleAuthProvider, getAuth, onAuthStateChanged, signInWithPopup, signOut } from 'firebase/auth';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA3RH_sHZlSzYjgWFjMJ8ICqUaSmlM32MI\",\n  authDomain: \"test-react-24.firebaseapp.com\",\n  databaseURL: \"https://test-react-24-default-rtdb.firebaseio.com\",\n  projectId: \"test-react-24\",\n  storageBucket: \"test-react-24.appspot.com\",\n  messagingSenderId: \"953116776213\",\n  appId: \"1:953116776213:web:e53b5925ca77097c89bb1c\",\n  measurementId: \"G-BTZC17XYPD\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\nconst auth = getAuth(app);\nexport const storage = getStorage(app);\n\nexport const categoryCollection = collection(db, \"categories\");\nexport const productsCollection = collection(db, \"products\");\nexport const ordersCollection = collection(db, \"orders\");\n\nconst provider = new GoogleAuthProvider();\nexport const LogIn = () => signInWithPopup(auth, provider);\nexport const LogOut = () => signOut(auth);\nexport const onAuthChange = (callback) => onAuthStateChanged(auth, callback);\n\nexport const onCategoriesLoad = (callback) =>\n  onSnapshot(categoryCollection, (snapshot) =>\n    callback(\n      snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }))\n    )\n  );\nexport const onProductsLoad = (callback) =>\n  onSnapshot(productsCollection, (snapshot) =>\n    callback(\n      snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }))\n    )\n  );\nexport const onOrdersLoad = (callback) =>\n  onSnapshot(ordersCollection, (snapshot) =>\n    callback(\n      snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }))\n    )\n  );\n\n  // отправка фотографии и получение ее url\nexport const uploadProductPhoto = (file) => {\n  const storageRef = ref(storage, `products/${file.name}`);\n  return uploadBytes(storageRef, file)\n    .then(() => {\n      return getDownloadURL(storageRef);\n    })\n    .catch((error) => {\n      console.log(\"Failed to upload product photo:\", error);\n    });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}